dice(sides=6, reps=9, adding=-4)
dice<-function(sides, reps, adding){
x<-sample(1:sides, size = reps, replace=TRUE)
total<-sum(x) + adding
note<-paste0(reps,"d",sides," + ", adding)
print(note)
total
}
dice(sides=4, reps=3, adding=6)
dice(sides=6, reps=9, adding=-4)
attach(stack.loss)
?current time
?currenttime
??currenttime
??time
?timeDate
??timeDate
??Date
Sys.Date()
paste("Welcome to Office Hours on", Sys.Date(), "with Dr. Tibbett")
# Office Hours for MSDS 6306: Doing Data Science
paste("Welcome to Office Hours on", Sys.Date(), "with Dr. Tibbett")
print("What questions do you have?")
swirl()
library("swirl")
swirl()
swirl()
# Reference: https://www.programiz.com/r-programming/histogram
# Let us use the built-in dataset airquality which has Daily air quality
#  measurements in New York, May to September 1973.-R documentation.
str(airquality)
# Take only Temp columns
Temperature <- airquality$Temp
hist(Temperature)
# histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
)
plot(x=airquality$Month, y=airquality$Temp)
plot(x=airquality$Month, y=airquality$Temp, main="Temperature by Month")
###################################################################################
# air_hist.R - Unit 2 Live Session Homework
###################################################################################
# Note: Please reformat these to place into your RMarkdown submission document.
# You can make sure it works here, but make it easy for your grader via RMD
###################################################################################
# You are responsible for the TODOs, but the complete code here will give you
# an idea of what the data look like.
# We will be using the built-in dataset airquality which has daily air quality
# measurements in New York from May to September 1973
str(airquality)
# Take only Temp columns
Temperature <- airquality$Temp
hist(Temperature)
# Histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
)
library("swirl")
swirl()
swirl()
knitr::opts_chunk$set(echo = TRUE)
plot(temperature, pressure )
plot(pressure$temperature, pressure$pressure)
pressure_scatter
?plot()
?pressure
?pressure_scatter
??pressure_scatter
??pressure_plot
swirl()
getwd()
setwd("~/1 SMU/DoingDataScience/Unit2/")
df<-read.csv("Honeydukes.csv")
unique(df$Customer)
length(unique(df$Customer))
17*29
x<-df$Knuts + (df$Sickles*29) + (df$Galleons*493)
rm(list=ls())
# Honeydukes
# setwd("~/1 SMU/DoingDataScience/Unit2/")
df<-read.csv("Honeydukes.csv")
length(unique(df$Customer))
total<-df$Knuts + (df$Sickles*29) + (df$Galleons*493)
# Tax function
# Note that amt must be sales tax in decimal format
# x is a vector representing the currency all converted to Knuts
tax<-function(x, amt){
profit<-(1-amt)*x
typical<-mean(x)
}
tax(total, .10)
tax<-function(x, amt){
profit<-(1-amt)*x
mean(x)
}
tax(total, .10)
tax(total)
tax<-function(x, amt=.10){
profit<-(1-amt)*x
mean(x)
}
tax(total)
tax(total, amt=.15)
tax<-function(x, amt=.10){
profit<-(1-amt)*x
mean(profit)
}
tax(total)
tax(total, amt=.15)
rm(list=ls())
getwd()
knitr::opts_chunk$set(echo = TRUE)
total
dice <- function(sides=6, reps, adding=0){
x <- sample(1:sides, size=reps, replace=TRUE) # With dice you roll with replacement
total <- sum(x, na.rm=TRUE) + adding
note <- paste0(reps,"d",sides," + ", adding)
# print(note) # If you want to see the notation for dice, uncomment this
total
}
dice(sides=4, reps=3, adding=6)
dice <- function(sides=6, reps, adding=0){
x <- sample(1:sides, size=reps, replace=TRUE) # With dice you roll with replacement
total <- sum(x, na.rm=TRUE) + adding
note <- paste0(reps,"d",sides," + ", adding)
print(note) # If you want to see the notation for dice, uncomment this
total
}
dice(sides=4, reps=3, adding=6)
dice <- function(sides=6, reps, adding=0){
x <- sample(1:sides, size=reps, replace=TRUE) # With dice you roll with replacement
total <- sum(x, na.rm=TRUE) + adding
note <- paste0(reps,"d",sides," + ", adding)
# print(note) # If you want to see the notation for dice, uncomment this
total
}
rolls <- 0
dice(sides=6, reps=5, adding=6)
rolls <- 0
for (i in 1:500){
x <- dice(sides = 6, reps = 5, adding = 6)
rolls[i] <- x
}
rolls
hist(rolls)
hist(rolls, main="How often a total was rolled")
hist(rolls, main="How often a total was rolled", xlab="Dice roll total for each", col="darkgreen")
# Honeydukes Solution
# setwd("~/1 SMU/DoingDataScience/Unit2/")
# Load the data
df<-read.csv("Honeydukes.csv")
length(df$Customer)
nrow(df$Customer)
View(df)
length(df$Customer)
total <- df$Knuts + (29*df$Sickles) + (493*df$Galleons)
total
tax <- function(x, amt=.1){
profit <- (1-amt)*x
mean(profit)
}
tax(total)
tax(total, amt=.15)
rm(list=ls())
dice <- function(sides=6, reps, adding=0){
x <- sample(1:sides, size=reps, replace=TRUE) # With dice, you roll with replacement
total <- sum(x, na.rm=TRUE) + adding
note <- paste0(reps, "d", sides, " + ", adding)
print(note) # If you want to see the notation each time, uncomment this part
total
}
dice(sides=4, rep=3, adding=6)
dice(sides=4, rep=3, adding=6)
rolls<-0 # Initializing a numeric vector of Totals
x <- dice(sides=6, reps = 5, adding= 6)
rolls<-0 # Initializing a numeric vector of Totals
for (i in 1:500){
x <- dice(sides=6, reps = 5, adding= 6)
rolls[i]<- x
}
rolls
dice <- function(sides=6, reps, adding=0){
x <- sample(1:sides, size=reps, replace=TRUE) # With dice, you roll with replacement
total <- sum(x, na.rm=TRUE) + adding
note <- paste0(reps, "d", sides, " + ", adding)
# print(note) # If you want to see the notation each time, uncomment this part
total
}
rolls<-0 # Initializing a numeric vector of Totals
for (i in 1:500){
x <- dice(sides=6, reps = 5, adding= 6)
rolls[i]<- x
}
rolls
hist(rolls)
hist(rolls, main="How often a total was rolled")
hist(rolls, main="How often a total was rolled", xlab="Dice roll total")
hist(rolls, main="How often a total was rolled", xlab="Dice roll total", col="darkgreen")
?read.csv
df<-read.csv("Honeydukes.csv")
length(df$Customer)
nrow(df)
total <- df$Knuts + (df$Sickles*29) + (df$Galleons*493)
profit <- x*(1-amt)
source('~/1 SMU/DoingDataScience/Unit2/Honeydukes_solution.R', echo=TRUE)
tax <- function(x, amt=.10){
profit <- x*(1-amt)
mean(profit)
}
tax(total)
tax(total, amt=.15)
summary(stackloss)
stackloss
summary(stackloss)
str(stackloss)
plot(stackloss$stack.loss, stackloss$Air.flow, main = "Stackloss vs. Airflow", xlab="stackloss", ylab="airflow")
stackloss$Air.Flow
stackloss
plot(stackloss$stack.loss, stackloss$Air.flow, main = "Stackloss vs. Airflow", xlab="stackloss", ylab="airflow", xlim = 0, ylim=100)
plot(stackloss$stack.loss, stackloss$Air.flow, main = "Stackloss vs. Airflow", xlab="stackloss", ylab="airflow", ylim=100)
stackloss$Air.Flow
mode(stackloss$Air.Flow)
stackloss
plot(stackloss$stack.loss, stackloss$Air.flow, main = "Stackloss vs. Airflow", ylab="stackloss", xlab="airflow", ylim=100)
plot(stackloss$stack.loss, stackloss$Air.flow, main = "Stackloss vs. Airflow", ylab="stackloss", xlab="airflow")
str(stackloss)
attach(stackloss)
summary(stackloss)
str(stackloss)
plot(stack.loss,Air.Flow)
# Installing rio package.  IMPORTANT: NEED install_formats() to complete the installation
# install.packages("rio")
library("rio")
# install_formats() # May have to do this as well.
# Calling the URL
URL <- "https://www.dropbox.com/s/130c5ol3o2jjmgk/public.fin.msm.model.csv?raw=1"
FinRegulatorData <- rio::import(URL)
# Look at the data set's structure
summary(FinRegulatorData)
str(FinRegulatorData)
unique(FinRegulatorData$country)
# Use the plyr library to see counts of Country
# install.packages('plyr')
library('plyr')
count(FinRegulatorData$country)
# This works similarly in the update: dplyr
library('dplyr')
count(FinRegulatorData, country)
library('dplyr')
count(FinRegulatorData, country)
knitr::opts_chunk$set(echo = TRUE)
library("rio")
URL <- "https://www.dropbox.com/s/130c5ol3o2jjmgk/public.fin.msm.model.csv?raw=1"
FinRegulatorData <- rio::import(URL)
summary(FinRegulatorData)
str(FinRegulatorData)
unique(FinRegulatorData$country)
library('plyr')
count(FinRegulatorData$country)
knitr::opts_chunk$set(echo = TRUE)
library("rio")
URL <- "https://www.dropbox.com/s/130c5ol3o2jjmgk/public.fin.msm.model.csv?raw=1"
FinRegulatorData <- rio::import(URL)
summary(FinRegulatorData)
str(FinRegulatorData)
unique(FinRegulatorData$country)
library('plyr')
count(FinRegulatorData$country)
knitr::opts_chunk$set(echo = TRUE)
library("rio")
URL <- "https://www.dropbox.com/s/130c5ol3o2jjmgk/public.fin.msm.model.csv?raw=1"
FinRegulatorData <- rio::import(URL)
summary(FinRegulatorData)
str(FinRegulatorData)
unique(FinRegulatorData$country)
library('plyr')
count(FinRegulatorData, n)
?count
knitr::opts_chunk$set(echo = TRUE)
library("rio")
URL <- "https://www.dropbox.com/s/130c5ol3o2jjmgk/public.fin.msm.model.csv?raw=1"
FinRegulatorData <- rio::import(URL)
summary(FinRegulatorData)
str(FinRegulatorData)
unique(FinRegulatorData$country)
library('plyr')
count(FinRegulatorData, vars="country")
library('dplyr')
count(FinRegulatorData, n)
library('plyr')
count(FinRegulatorData$country)
FinRegulatorData$country<-as.factor(FinRegulatorData$country)
count(FinRegulatorData$country)
count(FinRegulatorData, country)
library('dplyr')
count(FinRegulatorData, n)
count(FinRegulatorData, country)
View(FinRegulatorData)
count(FinRegulatorData, country)
library('dplyr')
library('plyr')
count(FinRegulatorData, country)
count(FinRegulatorData, "country")
knitr::opts_chunk$set(echo = TRUE)
df <- read.table("read_in.txt", sep="\t", header=FALSE, col.names = c("Name", "ID", "IQ", "Grades", "Legs"))
df <- read.table("..\..\read_in.txt", sep="\t", header=FALSE, col.names = c("Name", "ID", "IQ", "Grades", "Legs"))
df <- read.table("../../read_in.txt", sep="\t", header=FALSE, col.names = c("Name", "ID", "IQ", "Grades", "Legs"))
df <- read.table("../../data/read_in.txt", sep="\t", header=FALSE, col.names = c("Name", "ID", "IQ", "Grades", "Legs"))
knitr::opts_chunk$set(echo = TRUE)
df <- read.table("../../data/read_in.txt", sep="\t", header=FALSE, col.names = c("Name", "ID", "IQ", "Grades", "Legs"))
head(df)
summary(df)
unique(df$Legs)
library("reshape2")
vars<-colsplit(df$Name, "_", names=c("FirstName", "LastName"))
df<-cbind(vars, df) # Adding it back to the original dataframe.
head(df)
df[grep('^[Pp]a', df$LastName),]
report<-df[order(-df$IQ),c("FirstName", "LastName", "IQ")]
report
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('ggplot2')
beers<-read.csv('../../data/Beers.csv')
setwd("~/1 SMU/SMUDoingDataScience/Fall2017/Unit08")
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('ggplot2')
beers<-read.csv('../../data/Beers.csv')
brews<-read.csv('../../data/Breweries.csv')
head(beers)
head(brews)
ct<-data.frame(count(brews, brews$State))
names(ct) <- c("State", "Count")
ct[order(-ct$Count),]
library('dplyr')
library('ggplot2')
beers<-read.csv('../../data/Beers.csv')
brews<-read.csv('../../data/Breweries.csv')
paste("Please cycle through the results below.")
head(beers)
head(brews)
ct<-data.frame(count(brews, brews$State))
names(ct) <- c("State", "Count")
ct[order(-ct$Count),]
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('ggplot2')
beers<-read.csv('../../data/Beers.csv')
brews<-read.csv('../../data/Breweries.csv')
head(beers)
head(brews)
ct<-data.frame(count(brews, brews$State))
names(ct) <- c("State", "Count")
ct[order(-ct$Count),]
df<-merge(beers, brews, by.x="Brewery_id", by.y="Brew_ID")
View(df)
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('ggplot2')
beers<-read.csv('../../data/Beers.csv')
brews<-read.csv('../../data/Breweries.csv')
head(beers)
head(brews)
ct<-data.frame(count(brews, brews$State))
names(ct) <- c("State", "Count")
ct[order(-ct$Count),]
df<-merge(beers, brews, by.x="Brewery_id", by.y="Brew_ID")
names(df)<- c("BreweryID","BeerName", "BeerID", "ABV","IBU","Style","Ounces","Company","City","State")
rbind(head(df),tail(df))
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('ggplot2')
beers<-read.csv('../../data/Beers.csv')
brews<-read.csv('../../data/Breweries.csv')
head(beers)
head(brews)
ct<-data.frame(count(brews, brews$State))
names(ct) <- c("State", "Count")
ct[order(-ct$Count),]
df<-merge(beers, brews, by.x="Brewery_id", by.y="Brew_ID")
names(df)<- c("BreweryID","BeerName", "BeerID", "ABV","IBU","Style","Ounces","Company","City","State")
rbind(head(df),tail(df))
sapply(X=df, FUN=function(x) sum(is.na(x)))
colSums(is.na(df))
AB <- df %>%
select(State, ABV) %>%
group_by(State) %>%
summarize(MedianABV=round(median(ABV, na.rm=TRUE),4)) %>%
arrange(desc(MedianABV))
data.frame(AB)
IB<-df %>% # I use dplyr here to do all my steps simultaneously, but you can do this piecemeal in base R, too
select(State, IBU) %>%
group_by(State) %>%
summarize(MedianIBU=round(median(IBU, na.rm=TRUE),5)) %>% # I chose to round to five digits here
arrange(desc(MedianIBU)) # I put them in descending order because my clients are most interested in higher values
data.frame(IB)
ggplot(AB, aes(reorder(State, MedianABV), MedianABV)) + # I chose to reorder the bars in descending order, rather than alphabetical
geom_bar(aes(fill=State), stat="identity") + # the bar colors and what the values mean
ggtitle("Median ABV by State") + # The Title
theme(plot.title = element_text(hjust = 0.5)) + # Centers the Title
xlab("State\n\n") + # Gives an X-axis name
ylab("Typical Alcohol Content for Craft Beer") + # Gives an informative Y-axis name
coord_flip() # Flips the coordinates - I do this because it's easier to see States on the Y-Axis
ggplot(IB[!is.na(IB$MedianIBU),], aes(reorder(State, MedianIBU), MedianIBU)) + # I saw that SD had an NA for Bitterness - let's remove
geom_bar(aes(fill=State), stat="identity") +
ggtitle("Median IBU by State") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("State\n\n") +
ylab("Typical Bitterness for Craft Beer") +
coord_flip()
# Which state has the maximum alcoholic beer?
df[which.max(df$ABV),c("State","BeerName","ABV")]
# Which state has the most bitter beer?
df[which.max(df$IBU),c("State","BeerName","IBU")]
ggplot(df, aes(ABV, IBU)) +
geom_point(aes(color=State), show.legend=FALSE) + # Color the observations by State
ggtitle("Potential Relationship between ABV and IBU") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Alcohol Content") +
ylab("Bitterness") +
coord_flip()
summary(lm(ABV~IBU, data=df))
knitr::opts_chunk$set(echo = TRUE)
library("rvest")   # Great for grabbing and parsing HTML
library("dplyr")   # Easy transformation of data.frames for summarization
library("tidyr")   # Nice way to arrange data
library("ggplot2") # Excellent for visuals
url <- 'http://espn.go.com/nfl/superbowl/history/winners'
webpage<- read_html(url)
sb_table<-html_nodes(webpage, 'table')
sb<-html_table(sb_table)
a<-data.frame(sb)
names(a)<-a[2,]
df<-slice(a, 3:length(a$RESULT))
df
clean<-df %>%
separate(RESULT, into=c("Team1", "Team2"), sep=", ") %>%
# After splitting this way, I want the last 'word' from each column
separate(Team1, into=c("Team1", "Team1_Score"),sep="[ ](?=[^ ]+$)") %>%
separate(Team2, into=c("Team2", "Team2_Score"),sep="[ ](?=[^ ]+$)")
clean
df<-data.frame(clean)
names(df) <- c("SuperBowl", "Date", "Site", "Team1", "Team1_Score", "Team2", "Team2_Score")
head(df)
data.frame(sapply(df, class))
df[,c("Team1_Score", "Team2_Score")]<-sapply(df[,c("Team1_Score", "Team2_Score")], as.numeric) # Our numeric variables.
df$Date<-as.Date(df$Date, format='%b. %d, %Y') # Our date variable.
data.frame(sapply(df, class))
df %>%
count(Team1) %>%
arrange(desc(n))
unique(df$Team1)
knitr::opts_chunk$set(echo = TRUE)
library("rvest")   # Great for grabbing and parsing HTML
library("dplyr")   # Easy transformation of data.frames for summarization
library("tidyr")   # Nice way to arrange data
library("ggplot2") # Excellent for visuals
url <- 'http://espn.go.com/nfl/superbowl/history/winners'
webpage<- read_html(url)
sb_table<-html_nodes(webpage, 'table')
sb<-html_table(sb_table)
a<-data.frame(sb)
names(a)<-a[2,]
df<-slice(a, 3:length(a$RESULT))
df
clean<-df %>%
separate(RESULT, into=c("Team1", "Team2"), sep=", ") %>%
# After splitting this way, I want the last 'word' from each column
separate(Team1, into=c("Team1", "Team1_Score"),sep="[ ](?=[^ ]+$)") %>%
separate(Team2, into=c("Team2", "Team2_Score"),sep="[ ](?=[^ ]+$)")
clean
df<-data.frame(clean)
names(df) <- c("SuperBowl", "Date", "Site", "Team1", "Team1_Score", "Team2", "Team2_Score")
head(df)
data.frame(sapply(df, class))
df[,c("Team1_Score", "Team2_Score")]<-sapply(df[,c("Team1_Score", "Team2_Score")], as.numeric) # Our numeric variables.
df$Date<-as.Date(df$Date, format='%b. %d, %Y') # Our date variable.
data.frame(sapply(df, class))
df %>%
count(Team1) %>%
arrange(desc(n))
unique(df$Team1)
df["VictorySpread"]<- abs(df["Team1_Score"]-df["Team2_Score"]) # I use absolute value here because Team2 might outscore Team1.
summary(df$VictorySpread)
FQ<-as.numeric(summary(df$VictorySpread)[2]) # This is the first quartile that I grab
TQ<-as.numeric(summary(df$VictorySpread)[5]) # This is the third.
df["WasItClose"]<-"Standard" # Make everything standard at first, then overwrite!
df$WasItClose[which(df$VictorySpread<=FQ)] <- "Nail Biter" # Lower than first quartile might be extremely competitive
df$WasItClose[which(df$VictorySpread>=TQ)] <- "Blowout" # Higher than the third quartile might be hilariously uncompetitive
ggplot(df, aes(Date, VictorySpread))+
geom_bar(aes(fill=WasItClose), stat="identity")+
ggtitle("Super Bowls - Degrees of Competitive") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Super Bowl Year") +
ylab("Final Score Discrepancy")
watchthese<-df %>%
select(SuperBowl,VictorySpread,WasItClose, Date) %>% # Select These Variables Only
filter(WasItClose=="Nail Biter") %>% # Only consider Nail Biters
arrange(VictorySpread,desc(Date)) %>% # Arrange them by score and how recent they were
slice(1:5) %>% # Pick the closest - in event of a tie, prioritize most recent
select(-WasItClose, -VictorySpread) # Remove the Spoilers
data.frame(watchthese)
